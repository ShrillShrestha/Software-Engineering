{"version":3,"sources":["api/request.ts","api/routes.ts","api/index.ts","api/header.ts","components/Poc.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["handleResponse","response","a","json","res","ok","Error","message","URL","process","API","poc","fetch","method","headers","then","data","body","JSON","stringify","Poc","useState","setData","showForm","setShowForm","newName","setNewName","newNo","setNewNo","useEffect","api","catch","err","console","log","updateNewEntry","e","target","name","value","style","width","margin","marginTop","map","entry","className","phone","onChange","type","placeholder","onClick","preventDefault","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAEA,IAAMA,EAAc,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACLD,EAASE,OADJ,UACjBC,EADiB,OAEhBH,EAASI,GAFO,sBAEGC,MAAM,GAAD,OAAIF,EAAIG,UAFhB,gCAGdH,GAHc,2CAAH,sDCFpB,IAAII,EAAMC,mIAAYC,KAAO,wBAEvBA,EAAM,CACVC,IAAI,GAAD,OAAKH,EAAL,SCAU,EACL,WACN,OFIKI,MEJMF,EAAIC,IFIC,CAAEE,OAAQ,MAAOC,QGN5B,CAAE,eAAgB,sBHM+BC,KAAKf,IENhD,EAKJ,SAACgB,GACR,OFSuBC,EETFD,EFUhBJ,MEVOF,EAAIC,IFUA,CAChBE,OAAQ,OACRC,QGlBK,CAAE,eAAgB,oBHmBvBG,KAAMC,KAAKC,UAAUF,KACpBF,KAAKf,GALV,IAA2BiB,G,eIkFZG,EAhGH,WACV,MAAwBC,mBAAiD,IAAzE,mBAAOL,EAAP,KAAaM,EAAb,KACA,EAAgCD,oBAAS,GAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KACA,EAA8BH,mBAAS,IAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KACA,EAA0BL,mBAAS,IAAnC,mBAAOM,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACRC,IAEGf,MAAK,SAACX,GACLkB,EAAQlB,MAET2B,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,QAC7B,IAEH,IAWMG,EAAiB,SAACC,GACA,SAAlBA,EAAEC,OAAOC,KACXZ,EAAWU,EAAEC,OAAOE,OAEpBX,EAASQ,EAAEC,OAAOE,QAetB,OACE,mCACE,sBACEC,MAAO,CACLC,MAAO,MACPC,OAAQ,OACRC,UAAW,MAJf,UA/BK3B,EAAK4B,KAAI,SAACC,GACf,OACE,sBAAKC,UAAU,WAAf,UACE,8BAAMD,EAAMP,OACZ,8BAAMO,EAAME,cAmCbxB,EACC,sBAAKuB,UAAU,WAAf,UACE,uBACEP,MAAOd,EACPuB,SAAUb,EACVG,KAAK,OACLW,KAAK,OACLC,YAAY,aAEd,uBACEX,MAAOZ,EACPqB,SAAUb,EACVG,KAAK,KACLW,KAAK,OACLC,YAAY,qBAGd,KACF3B,EAWA,uBACE0B,KAAK,SACLV,MAAM,SACNY,QArDa,SAACf,GACtBA,EAAEgB,iBACF5B,GAAY,GACZF,EAAQ,GAAD,mBAAKN,GAAL,CAAW,CAAEsB,KAAMb,EAASsB,MAAOpB,MAE1CG,EAAY,CAAEQ,KAAMb,EAASsB,MAAOpB,IAEpCC,EAAS,IACTF,EAAW,KA8CHoB,UAAU,WAdZ,uBACEG,KAAK,SACLV,MAAM,gBACNY,QAAS,SAACf,GACRA,EAAEgB,iBACF5B,GAAY,IAEdsB,UAAU,iBC1DPO,MAtBf,WACE,OACE,cAAC,EAAD,KCOWC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBzC,MAAK,YAAkD,IAA/C0C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d055b76a.chunk.js","sourcesContent":["import { authHeader, header } from './header';\n\nconst handleResponse = async (response: any) => {\n  let res = await response.json();\n  if (!response.ok) throw Error(`${res.message}`);\n  return res;\n};\n\nfunction get(url: string) {\n  return fetch(url, { method: 'GET', headers: header() }).then(handleResponse);\n}\n\nfunction authGet(url: string, param: string) {\n  return fetch(url + param, { method: 'GET', headers: authHeader() }).then(\n    handleResponse\n  );\n}\n\nfunction post(url: string, body: object) {\n  return fetch(url, {\n    method: 'POST',\n    headers: header(),\n    body: JSON.stringify(body),\n  }).then(handleResponse);\n}\n\nfunction authPost(url: string, body: any) {\n  return fetch(url, {\n    method: 'POST',\n    headers: authHeader(),\n    body: JSON.stringify(body),\n  }).then(handleResponse);\n}\n\nfunction authPut(url: string, body: any) {\n  return fetch(url, {\n    method: 'PUT',\n    headers: authHeader(),\n    body: JSON.stringify(body),\n  }).then(handleResponse);\n}\n\nexport { get, authGet, post, authPost, authPut };\n","let URL = process.env.API || 'http://localhost:8081';\n\nconst API = {\n  poc: `${URL}/poc`,\n};\n\nexport { URL, API };\n","import { authGet, post, authPost, authPut, get } from './request';\nimport { API } from './routes';\n\nexport default {\n  getPOC: () => {\n    return get(API.poc);\n  },\n\n  postPOC: (data: { name: string; phone: string }) => {\n    return post(API.poc, data);\n  },\n};\n","import { getLocalStorage, setLocalStorage } from 'utils/utils';\n\nfunction header() {\n  return { 'Content-Type': 'application/json' };\n}\n\nfunction authHeader() {\n  let authtoken = getLocalStorage('finapp-token');\n  return { 'Content-Type': 'application/json', token: authtoken };\n}\n\nexport { header, authHeader };\n","import api from 'api';\nimport React, { useEffect, useState } from 'react';\nimport 'style/Poc.css';\n\nconst Poc = () => {\n  const [data, setData] = useState<Array<{ name: string; phone: string }>>([]);\n  const [showForm, setShowForm] = useState(false);\n  const [newName, setNewName] = useState('');\n  const [newNo, setNewNo] = useState('');\n\n  useEffect(() => {\n    api\n      .getPOC()\n      .then((res) => {\n        setData(res);\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  const getEntries = () => {\n    return data.map((entry) => {\n      return (\n        <div className=\"entryRow\">\n          <div>{entry.name}</div>\n          <div>{entry.phone}</div>\n        </div>\n      );\n    });\n  };\n\n  const updateNewEntry = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.name === 'name') {\n      setNewName(e.target.value);\n    } else {\n      setNewNo(e.target.value);\n    }\n  };\n\n  const updateDatabase = (e: React.MouseEvent) => {\n    e.preventDefault();\n    setShowForm(false);\n    setData([...data, { name: newName, phone: newNo }]);\n\n    api.postPOC({ name: newName, phone: newNo });\n\n    setNewNo('');\n    setNewName('');\n  };\n\n  return (\n    <>\n      <div\n        style={{\n          width: '75%',\n          margin: 'auto',\n          marginTop: '5%',\n        }}\n      >\n        {getEntries()}\n        {showForm ? (\n          <div className=\"entryRow\">\n            <input\n              value={newName}\n              onChange={updateNewEntry}\n              name=\"name\"\n              type=\"text\"\n              placeholder=\"Add Name\"\n            />\n            <input\n              value={newNo}\n              onChange={updateNewEntry}\n              name=\"no\"\n              type=\"text\"\n              placeholder=\"Add Phone no.\"\n            />\n          </div>\n        ) : null}\n        {!showForm ? (\n          <input\n            type=\"button\"\n            value=\"Add New Entry\"\n            onClick={(e) => {\n              e.preventDefault();\n              setShowForm(true);\n            }}\n            className=\"button\"\n          />\n        ) : (\n          <input\n            type=\"button\"\n            value=\"SUBMIT\"\n            onClick={updateDatabase}\n            className=\"button\"\n          />\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Poc;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Poc from './components/Poc';\n\nfunction App() {\n  return (\n    <Poc />\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.tsx</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}